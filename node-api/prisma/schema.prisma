// node-api/prisma/schema.prisma

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ImportStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
}

model User {
  id                   Int                   @id @default(autoincrement())
  name                 String
  email                String                @unique
  password             String
  profile_image        String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  roleId               Int
  role                 Role                  @relation(fields: [roleId], references: [id])
  groups               Group[]
  packageId            Int?
  package              Package?              @relation(fields: [packageId], references: [id])
  importLogs           ImportLog[]
  systems              System[]
  divergenceExceptions DivergenceException[]

  @@map("users")
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  createdAt DateTime @default(now())

  @@map("password_resets")
}

model Credential {
  id        String   @id @default(cuid())
  name      String
  path      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("credentials")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]

  @@map("roles")
}

model Group {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]

  @@map("groups")
}

model Platform {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  key      String    @unique
  route    String    @unique
  icon     String?
  packages Package[]

  @@map("platforms")
}

model Package {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  platforms   Platform[]
  users       User[]

  @@map("packages")
}

// ======================= INÍCIO DA ALTERAÇÃO =======================
model System {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id])

  // Campos para a nova arquitetura de Fontes de Dados
  type        String   @default("CSV") // "CSV", "PostgreSQL", "Oracle", etc.
  connectionDetails Json?  // Armazena todos os detalhes de conexão (user, port, server, etc.)
  
  @@map("systems")
}
// ======================== FIM DA ALTERAÇÃO =========================

model ImportLog {
  id            Int          @id @default(autoincrement())
  fileName      String
  targetSystem  String
  status        ImportStatus @default(PENDING)
  processedRows Int          @default(0)
  totalRows     Int          @default(0)
  errorDetails  String?
  createdAt     DateTime     @default(now())
  completedAt   DateTime?
  userId        Int
  user          User         @relation(fields: [userId], references: [id])

  @@map("import_logs")
}

model Profile {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  identities Identity[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("profiles")
}

model Identity {
  id                   Int                   @id @default(autoincrement())
  sourceSystem         String
  identityId           String
  name                 String?
  email                String?
  status               String?
  userType             String?
  cpf                  String?
  extraData            Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  profileId            Int?
  profile              Profile?              @relation(fields: [profileId], references: [id])
  divergenceExceptions DivergenceException[]

  @@unique([sourceSystem, identityId])
  @@map("identities")
}

model DivergenceException {
  id             Int       @id @default(autoincrement())
  divergenceCode String
  justification  String
  createdAt      DateTime  @default(now())
  expiresAt      DateTime?
  targetSystem   String?
  identityId     Int
  identity       Identity  @relation(fields: [identityId], references: [id], onDelete: Cascade)
  userId         Int
  user           User      @relation(fields: [userId], references: [id])

  @@unique([identityId, divergenceCode, targetSystem])
  @@map("divergence_exceptions")
}