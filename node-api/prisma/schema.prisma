generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ImportStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
}

model User {
  id                   Int                   @id @default(autoincrement())
  name                 String
  email                String                @unique
  password             String
  profile_image        String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  roleId               Int
  role                 Role                  @relation(fields: [roleId], references: [id])
  groups               Group[]
  packageId            Int?
  package              Package?              @relation(fields: [packageId], references: [id])
  importLogs           ImportLog[]
  systems              System[]
  divergenceExceptions DivergenceException[]
  sodRules             SodRule[]
  rbacRules            RbacRule[]

  @@map("users")
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  createdAt DateTime @default(now())

  @@map("password_resets")
}

model Credential {
  id        String   @id @default(cuid())
  name      String
  path      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("credentials")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]

  @@map("roles")
}

model Group {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]

  @@map("groups")
}

model Platform {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  key      String    @unique
  route    String    @unique
  icon     String?
  packages Package[]

  @@map("platforms")
}

model Package {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  platforms   Platform[]
  users       User[]

  @@map("packages")
}

model System {
  id                Int      @id @default(autoincrement())
  name              String   @unique
  description       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            Int
  user              User     @relation(fields: [userId], references: [id])
  type              String   @default("CSV")
  connectionDetails Json?

  @@map("systems")
}

model ImportLog {
  id            Int          @id @default(autoincrement())
  fileName      String
  targetSystem  String
  status        ImportStatus @default(PENDING)
  processedRows Int          @default(0)
  totalRows     Int          @default(0)
  errorDetails  String?
  createdAt     DateTime     @default(now())
  completedAt   DateTime?
  userId        Int
  user          User         @relation(fields: [userId], references: [id])

  @@map("import_logs")
}

model Profile {
  id                Int        @id @default(autoincrement())
  name              String     @unique
  identities        Identity[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  rbacRulesGranted  RbacRule[] @relation("GrantedProfile")
  rbacRulesRequired RbacRule[] @relation("RequiredProfile")

  @@map("profiles")
}

model Identity {
  id                   Int                   @id @default(autoincrement())
  sourceSystem         String
  identityId           String
  name                 String?
  email                String?
  status               String?
  userType             String?
  cpf                  String?
  extraData            Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  profileId            Int?
  profile              Profile?              @relation(fields: [profileId], references: [id])
  divergenceExceptions DivergenceException[]

  @@unique([sourceSystem, identityId])
  @@map("identities")
}

model DivergenceException {
  id             Int       @id @default(autoincrement())
  divergenceCode String
  justification  String
  createdAt      DateTime  @default(now())
  expiresAt      DateTime?
  targetSystem   String?
  identityId     Int
  identity       Identity  @relation(fields: [identityId], references: [id], onDelete: Cascade)
  userId         Int
  user           User      @relation(fields: [userId], references: [id])

  @@unique([identityId, divergenceCode, targetSystem])
  @@map("divergence_exceptions")
}

model SodRule {
  id              Int      @id @default(autoincrement())
  name            String
  description     String?
  areaNegocio     String?
  processoNegocio String?
  owner           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  ruleType        String   // Ex: ROLE_X_ROLE, ATTR_X_ROLE, ATTR_X_SYSTEM

  // --- Campos para Valor A ---
  valueAType      String   // PROFILE ou ATTRIBUTE
  valueAId        String   // ID do Perfil (Int como String) ou ID/Nome do Atributo (String)

  // --- NOVOS CAMPOS PARA valueA QUANDO valueAType = "ATTRIBUTE" ---
  valueAOperator  String? // Operador (ex: "equals", "contains") - Opcional (?) pois só se aplica a ATTR
  valueAValue     String? // Valor específico do atributo (ex: "Ativo") - Opcional (?) pois só se aplica a ATTR

  // --- Campos para Valor B ---
  valueBType      String   // PROFILE ou SYSTEM (ou ATTRIBUTE no futuro?)
  valueBId        String   // ID do Perfil (Int como String) ou ID do Sistema (Int como String)

  @@unique([userId, valueAType, valueAId, valueBType, valueBId]) // Unique constraint pode precisar ser revisada se valueAValue/Operator forem incluídos
  @@map("sod_rules")
}

model RbacRule {
  id                      Int      @id @default(autoincrement())
  name                    String
  description             String?
  areaNegocio             String?
  processoNegocio         String?
  owner                   String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  userId                  Int
  user                    User     @relation(fields: [userId], references: [id])
  conditionType           String
  grantedProfileId        Int
  grantedProfile          Profile  @relation("GrantedProfile", fields: [grantedProfileId], references: [id], onDelete: Cascade)
  requiredProfileId       Int?
  requiredProfile         Profile? @relation("RequiredProfile", fields: [requiredProfileId], references: [id], onDelete: SetNull)
  requiredAttributeId     String?
  requiredAttributeValue  String?
  requiredAttributeOperator String?
  logicalOperator         String?
  attributeConditions     RbacAttributeCondition[]

  @@map("rbac_rules")
}

model RbacAttributeCondition {
  id             Int      @id @default(autoincrement())
  rbacRuleId     Int
  rbacRule       RbacRule @relation(fields: [rbacRuleId], references: [id], onDelete: Cascade)
  attributeId    String
  operator       String
  attributeValue String

  @@map("rbac_attribute_conditions")
}