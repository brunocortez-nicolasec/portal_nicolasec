generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  name          String
  email         String   @unique
  password      String
  profile_image String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  roleId        Int
  role          Role     @relation(fields: [roleId], references: [id])

  groups        Group[]

  // --- MUDANÇA: Adiciona a relação com Pacotes ---
  packageId     Int?     // Armazena o ID do pacote (opcional)
  package       Package? @relation(fields: [packageId], references: [id])

  @@map("users")
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  @@map("password_resets")
}

model Credential {
  id        String   @id @default(cuid())
  name      String
  path      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("credentials")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
  @@map("roles")
}

model Group {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
  @@map("groups")
}


// --- NOVO MODELO: Tabela para as Plataformas (TruIM, etc.) ---
model Platform {
  id        Int      @id @default(autoincrement())
  name      String   @unique // Ex: "TruIM - Controle de Identidades"
  key       String   @unique // Ex: "truim" (para usar na lógica do código)
  route     String   @unique // Ex: "/tas/truim" (a rota no frontend)
  icon      String?           // Ex: "fact_check" (nome do ícone)

  packages  Package[] // Relação muitos-para-muitos com Pacotes

  @@map("platforms")
}


// --- NOVO MODELO: Tabela para os Pacotes de Serviços ---
model Package {
  id          Int      @id @default(autoincrement())
  name        String   @unique // Ex: "Pacote Básico", "Pacote Premium"
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  platforms   Platform[] // Relação muitos-para-muitos com Plataformas
  users       User[]     // Relação um-para-muitos com Usuários

  @@map("packages")
}