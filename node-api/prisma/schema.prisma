generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ImportStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
}

model User {
  id            Int      @id @default(autoincrement())
  name          String
  email         String   @unique
  password      String
  profile_image String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  roleId        Int
  role          Role     @relation(fields: [roleId], references: [id])

  groups        Group[]

  packageId     Int?
  package       Package? @relation(fields: [packageId], references: [id])

  importLogs    ImportLog[]

  @@map("users")
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  @@map("password_resets")
}

model Credential {
  id        String   @id @default(cuid())
  name      String
  path      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("credentials")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
  @@map("roles")
}

model Group {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
  @@map("groups")
}

model Platform {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  key       String    @unique
  route     String    @unique
  icon      String?

  packages  Package[]

  @@map("platforms")
}

model Package {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  platforms   Platform[]
  users       User[]

  @@map("packages")
}

model ImportLog {
  id            Int          @id @default(autoincrement())
  fileName      String
  targetSystem  String
  status        ImportStatus @default(PENDING)
  processedRows Int          @default(0)
  totalRows     Int          @default(0)
  errorDetails  String?
  createdAt     DateTime     @default(now())
  completedAt   DateTime?

  userId        Int
  user          User         @relation(fields: [userId], references: [id])

  @@map("import_logs")
}

// --- NOVO MODELO: ARMAZENA AS IDENTIDADES DOS ARQUIVOS CSV ---
model Identity {
  id           Int      @id @default(autoincrement())
  sourceSystem String   // Sistema de origem do dado (ex: "TruIM", "SAP", "RH")
  identityId   String   // ID único da identidade no sistema de origem (ex: email, matrícula)
  name         String?
  email        String?
  status       String?  // Ex: "Ativo", "Inativo"
  userType     String?  // Ex: "Funcionário", "Terceirizado"
  
  // Campo flexível para armazenar outras colunas do CSV
  extraData    Json?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Garante que não teremos identidades duplicadas para o mesmo sistema
  @@unique([sourceSystem, identityId])
  @@map("identities")
}